{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"민형2.ipynb의 사본","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# IMPORT"],"metadata":{"id":"GZvXBMxtAuvB"}},{"cell_type":"code","execution_count":172,"metadata":{"id":"GODiobNZUnZo","executionInfo":{"status":"ok","timestamp":1652769638184,"user_tz":-540,"elapsed":439,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","source":["import os\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n","import numpy as np\n","import pickle\n","import tensorflow as tf\n","import tensorflow_probability as tfp\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.layers import Input, LSTM, Dense, Activation\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.utils import shuffle\n","from keras.models import Sequential\n","from keras.layers import Dense, LSTM\n","from keras import optimizers\n","from keras.callbacks import EarlyStopping, ModelCheckpoint"],"metadata":{"id":"eP3-orgFsG_a","executionInfo":{"status":"ok","timestamp":1652769638722,"user_tz":-540,"elapsed":6,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":173,"outputs":[]},{"cell_type":"code","source":["# 한글폰트 사용 in colab\n","%matplotlib inline  \n","\n","import matplotlib as mpl \n","import matplotlib.pyplot as plt \n","import matplotlib.font_manager as fm  \n","\n","# !apt-get update -qq\n","# !apt-get install fonts-nanum* -qq\n","\n","path = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf' \n","font_name = fm.FontProperties(fname=path, size=10).get_name()\n","print(font_name)\n","plt.rc('font', family=font_name)\n","\n","fm._rebuild()\n","mpl.rcParams['axes.unicode_minus'] = False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wf-N5pQ-9wwx","executionInfo":{"status":"ok","timestamp":1652769639587,"user_tz":-540,"elapsed":870,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"40427e80-e857-4d19-d113-500231efb589"},"execution_count":174,"outputs":[{"output_type":"stream","name":"stdout","text":["NanumBarunGothic\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_haNy6NFVMXD","executionInfo":{"status":"ok","timestamp":1652769642174,"user_tz":-540,"elapsed":2592,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"9e7b39d0-fadc-4b45-c438-3786eff374e0"},"execution_count":175,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["# DATA LOAD"],"metadata":{"id":"RHTwRHyYAxpQ"}},{"cell_type":"code","source":["rtn_df=pd.read_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/최종데이터셋.csv\")"],"metadata":{"id":"H-V5SmX7xz8d","executionInfo":{"status":"ok","timestamp":1652769642175,"user_tz":-540,"elapsed":17,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":176,"outputs":[]},{"cell_type":"code","source":["df3=rtn_df[['Date','코스피']]\n","df3.Date=pd.to_datetime(df3.Date)\n","df3=df3.set_index('Date')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IWW8kAr3C5KT","executionInfo":{"status":"ok","timestamp":1652769642176,"user_tz":-540,"elapsed":17,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"0582ec9c-c7f7-4836-be2f-ceba249e18cf"},"execution_count":177,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py:5516: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[name] = value\n"]}]},{"cell_type":"code","source":["rtn_df['Date']=pd.to_datetime(rtn_df['Date'])\n","rtn_df=rtn_df.set_index('Date')\n","rtn_df=rtn_df[['단기채로그', '중기채로그', 'ksp로그', 'iau로그', 'dbc로그', 'vnq로그', 'nsd로그']]"],"metadata":{"id":"mVgtVlFnyHFQ","executionInfo":{"status":"ok","timestamp":1652769642177,"user_tz":-540,"elapsed":16,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":178,"outputs":[]},{"cell_type":"code","source":["rtn_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"4DwS3y6aB1wy","executionInfo":{"status":"ok","timestamp":1652769642178,"user_tz":-540,"elapsed":16,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"ff48bb7c-d695-4c86-d4fa-1f3a31286731"},"execution_count":179,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               단기채로그     중기채로그     ksp로그     iau로그     dbc로그     vnq로그  \\\n","Date                                                                     \n","2006-03-01  0.000000  0.000000  0.000000  0.001961 -0.002149  0.005808   \n","2006-03-02  0.000263 -0.000102 -0.002840  0.011332  0.017911 -0.001220   \n","2006-03-03  0.000105  0.000438 -0.028741 -0.007067  0.009256 -0.005508   \n","2006-03-06  0.000326 -0.000830  0.011826 -0.018973 -0.016041  0.017942   \n","2006-03-07  0.000094 -0.000840 -0.021110 -0.005072 -0.017601 -0.012129   \n","...              ...       ...       ...       ...       ...       ...   \n","2022-05-04  0.000084 -0.000864 -0.001079  0.009819  0.030728  0.011425   \n","2022-05-05  0.000000  0.000000  0.000000 -0.004196 -0.005292 -0.027030   \n","2022-05-06  0.000109  0.001001 -0.012424  0.001961  0.001061 -0.011940   \n","2022-05-09  0.000202  0.002147  0.000000 -0.014940 -0.046284 -0.045043   \n","2022-05-10  0.000063  0.000674 -0.018298 -0.008557 -0.005939 -0.018388   \n","\n","               nsd로그  \n","Date                  \n","2006-03-01 -0.000493  \n","2006-03-02 -0.012176  \n","2006-03-03  0.017103  \n","2006-03-06 -0.018103  \n","2006-03-07 -0.043212  \n","...              ...  \n","2022-05-04  0.014217  \n","2022-05-05 -0.033019  \n","2022-05-06 -0.016993  \n","2022-05-09 -0.040948  \n","2022-05-10 -0.002740  \n","\n","[4197 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-62fec512-8f5d-4eda-957b-656f0a6fcf5e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>단기채로그</th>\n","      <th>중기채로그</th>\n","      <th>ksp로그</th>\n","      <th>iau로그</th>\n","      <th>dbc로그</th>\n","      <th>vnq로그</th>\n","      <th>nsd로그</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2006-03-01</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.001961</td>\n","      <td>-0.002149</td>\n","      <td>0.005808</td>\n","      <td>-0.000493</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-02</th>\n","      <td>0.000263</td>\n","      <td>-0.000102</td>\n","      <td>-0.002840</td>\n","      <td>0.011332</td>\n","      <td>0.017911</td>\n","      <td>-0.001220</td>\n","      <td>-0.012176</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-03</th>\n","      <td>0.000105</td>\n","      <td>0.000438</td>\n","      <td>-0.028741</td>\n","      <td>-0.007067</td>\n","      <td>0.009256</td>\n","      <td>-0.005508</td>\n","      <td>0.017103</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-06</th>\n","      <td>0.000326</td>\n","      <td>-0.000830</td>\n","      <td>0.011826</td>\n","      <td>-0.018973</td>\n","      <td>-0.016041</td>\n","      <td>0.017942</td>\n","      <td>-0.018103</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-07</th>\n","      <td>0.000094</td>\n","      <td>-0.000840</td>\n","      <td>-0.021110</td>\n","      <td>-0.005072</td>\n","      <td>-0.017601</td>\n","      <td>-0.012129</td>\n","      <td>-0.043212</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2022-05-04</th>\n","      <td>0.000084</td>\n","      <td>-0.000864</td>\n","      <td>-0.001079</td>\n","      <td>0.009819</td>\n","      <td>0.030728</td>\n","      <td>0.011425</td>\n","      <td>0.014217</td>\n","    </tr>\n","    <tr>\n","      <th>2022-05-05</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-0.004196</td>\n","      <td>-0.005292</td>\n","      <td>-0.027030</td>\n","      <td>-0.033019</td>\n","    </tr>\n","    <tr>\n","      <th>2022-05-06</th>\n","      <td>0.000109</td>\n","      <td>0.001001</td>\n","      <td>-0.012424</td>\n","      <td>0.001961</td>\n","      <td>0.001061</td>\n","      <td>-0.011940</td>\n","      <td>-0.016993</td>\n","    </tr>\n","    <tr>\n","      <th>2022-05-09</th>\n","      <td>0.000202</td>\n","      <td>0.002147</td>\n","      <td>0.000000</td>\n","      <td>-0.014940</td>\n","      <td>-0.046284</td>\n","      <td>-0.045043</td>\n","      <td>-0.040948</td>\n","    </tr>\n","    <tr>\n","      <th>2022-05-10</th>\n","      <td>0.000063</td>\n","      <td>0.000674</td>\n","      <td>-0.018298</td>\n","      <td>-0.008557</td>\n","      <td>-0.005939</td>\n","      <td>-0.018388</td>\n","      <td>-0.002740</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4197 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-62fec512-8f5d-4eda-957b-656f0a6fcf5e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-62fec512-8f5d-4eda-957b-656f0a6fcf5e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-62fec512-8f5d-4eda-957b-656f0a6fcf5e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":179}]},{"cell_type":"markdown","source":["# 하락장 예측 train, test\n","\n","<pre>\n","\n","하락장 : 2020-02-26 ~ 2020-04-06\n","상승장 : 2020-04-06 ~ 2020-06-26\n","1. MACD 하락 - 상승 : 2020-02-26 ~ 2020-06-26 \n","2. 종가 하락 - 상승 : 2020-02-26 ~ 2020-06-05\n","3. CLI 상승 : 2019-10-31 ~ [2019-11-01 : 2020-04-30]"],"metadata":{"id":"cQOwyR9ZeWda"}},{"cell_type":"code","source":["rtn_df_train=rtn_df.loc[:'2019-10-31'] # Train set\n","rtn_df_test=rtn_df.loc['2020-04-07':'2021-07-13']  # Test set # Test set"],"metadata":{"id":"8bN2yuF54i4D","executionInfo":{"status":"ok","timestamp":1652770454615,"user_tz":-540,"elapsed":348,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":191,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"8RbIN0-X-80D"}},{"cell_type":"code","source":["rtn_df_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"EauVKOUDxg2x","executionInfo":{"status":"ok","timestamp":1652770457318,"user_tz":-540,"elapsed":605,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"31ec4c0a-fad6-4de7-e661-b8ed41788b1c"},"execution_count":192,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               단기채로그     중기채로그     ksp로그     iau로그     dbc로그     vnq로그  \\\n","Date                                                                     \n","2006-03-01  0.000000  0.000000  0.000000  0.001961 -0.002149  0.005808   \n","2006-03-02  0.000263 -0.000102 -0.002840  0.011332  0.017911 -0.001220   \n","2006-03-03  0.000105  0.000438 -0.028741 -0.007067  0.009256 -0.005508   \n","2006-03-06  0.000326 -0.000830  0.011826 -0.018973 -0.016041  0.017942   \n","2006-03-07  0.000094 -0.000840 -0.021110 -0.005072 -0.017601 -0.012129   \n","...              ...       ...       ...       ...       ...       ...   \n","2019-10-25  0.000004 -0.001182  0.001069  0.002085  0.005782 -0.008568   \n","2019-10-28  0.000081 -0.002041  0.002731 -0.009069 -0.003851 -0.006074   \n","2019-10-29  0.000023  0.001165 -0.000435 -0.003510 -0.001931  0.006074   \n","2019-10-30  0.000061  0.000579 -0.005953  0.007008 -0.006464  0.003605   \n","2019-10-31  0.000025  0.000157  0.001542  0.009729 -0.005854 -0.001801   \n","\n","               nsd로그  \n","Date                  \n","2006-03-01 -0.000493  \n","2006-03-02 -0.012176  \n","2006-03-03  0.017103  \n","2006-03-06 -0.018103  \n","2006-03-07 -0.043212  \n","...              ...  \n","2019-10-25 -0.025676  \n","2019-10-28  0.003043  \n","2019-10-29 -0.000912  \n","2019-10-30  0.014293  \n","2019-10-31 -0.002902  \n","\n","[3543 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-8a05e583-a72a-40f3-ac72-366d7d17519a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>단기채로그</th>\n","      <th>중기채로그</th>\n","      <th>ksp로그</th>\n","      <th>iau로그</th>\n","      <th>dbc로그</th>\n","      <th>vnq로그</th>\n","      <th>nsd로그</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2006-03-01</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.001961</td>\n","      <td>-0.002149</td>\n","      <td>0.005808</td>\n","      <td>-0.000493</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-02</th>\n","      <td>0.000263</td>\n","      <td>-0.000102</td>\n","      <td>-0.002840</td>\n","      <td>0.011332</td>\n","      <td>0.017911</td>\n","      <td>-0.001220</td>\n","      <td>-0.012176</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-03</th>\n","      <td>0.000105</td>\n","      <td>0.000438</td>\n","      <td>-0.028741</td>\n","      <td>-0.007067</td>\n","      <td>0.009256</td>\n","      <td>-0.005508</td>\n","      <td>0.017103</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-06</th>\n","      <td>0.000326</td>\n","      <td>-0.000830</td>\n","      <td>0.011826</td>\n","      <td>-0.018973</td>\n","      <td>-0.016041</td>\n","      <td>0.017942</td>\n","      <td>-0.018103</td>\n","    </tr>\n","    <tr>\n","      <th>2006-03-07</th>\n","      <td>0.000094</td>\n","      <td>-0.000840</td>\n","      <td>-0.021110</td>\n","      <td>-0.005072</td>\n","      <td>-0.017601</td>\n","      <td>-0.012129</td>\n","      <td>-0.043212</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-10-25</th>\n","      <td>0.000004</td>\n","      <td>-0.001182</td>\n","      <td>0.001069</td>\n","      <td>0.002085</td>\n","      <td>0.005782</td>\n","      <td>-0.008568</td>\n","      <td>-0.025676</td>\n","    </tr>\n","    <tr>\n","      <th>2019-10-28</th>\n","      <td>0.000081</td>\n","      <td>-0.002041</td>\n","      <td>0.002731</td>\n","      <td>-0.009069</td>\n","      <td>-0.003851</td>\n","      <td>-0.006074</td>\n","      <td>0.003043</td>\n","    </tr>\n","    <tr>\n","      <th>2019-10-29</th>\n","      <td>0.000023</td>\n","      <td>0.001165</td>\n","      <td>-0.000435</td>\n","      <td>-0.003510</td>\n","      <td>-0.001931</td>\n","      <td>0.006074</td>\n","      <td>-0.000912</td>\n","    </tr>\n","    <tr>\n","      <th>2019-10-30</th>\n","      <td>0.000061</td>\n","      <td>0.000579</td>\n","      <td>-0.005953</td>\n","      <td>0.007008</td>\n","      <td>-0.006464</td>\n","      <td>0.003605</td>\n","      <td>0.014293</td>\n","    </tr>\n","    <tr>\n","      <th>2019-10-31</th>\n","      <td>0.000025</td>\n","      <td>0.000157</td>\n","      <td>0.001542</td>\n","      <td>0.009729</td>\n","      <td>-0.005854</td>\n","      <td>-0.001801</td>\n","      <td>-0.002902</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3543 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a05e583-a72a-40f3-ac72-366d7d17519a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8a05e583-a72a-40f3-ac72-366d7d17519a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8a05e583-a72a-40f3-ac72-366d7d17519a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":192}]},{"cell_type":"markdown","source":["# 학습 데이터 생성"],"metadata":{"id":"rXzASH8oBFoU"}},{"cell_type":"code","source":["# Markowitz's Portfolio Network (MPN)을 이용해서 최적 포트폴리오를 구축한다.\n","#\n","# 1. 학습 데이터와 평가 데이터 생성 모듈.\n","#\n","# 참고 : https://blog.naver.com/chunjein/222492404960/\n","#        https://blog.naver.com/chunjein/222494724278\n","#        https://blog.naver.com/chunjein/222496640766\n","#\n","# 2021.08.27   blog.naver.com/chunjein (조성현)\n","# ------------------------------------------------------------------------\n","import pandas as pd\n","import numpy as np\n","import pickle\n","\n","\n","N_STOCKS = 7  # 포트폴리오를 구성할 주식 종목 개수\n","N_TIME = 20    # look back window size\n","N_FUTURE = 20  # 미래 20 기간의 최적 포트폴리오를 추정할 예정이다.\n","\n","\n","# 1. 학습과 performance-test에 사용할 데이터를 생성한다.\n","# --------------------------------------------------\n","# 수익률 sequence 데이터를 생성한다.\n","def make_sequence(x):\n","    T = N_TIME + N_FUTURE\n","    x_seq = np.expand_dims(np.array(x.iloc[0:T, :]), 0)\n","    \n","    for i in range(1, len(x) - T + 1):\n","        d = np.expand_dims(np.array(x.iloc[i:(i+T), :]), 0)\n","        x_seq = np.concatenate((x_seq, d))\n","        \n","    return x_seq\n","\n","# 학습 데이터와 시험 데이터를 생성한다. 시험 데이터는 향후 performance test용으로\n","# 사용한다. 학습 데이터 80%, 시험 데이터 20%\n","n = int(rtn_df.shape[0] * 0.9)\n","rtn_train = make_sequence(rtn_df_train)\n","rtn_test = make_sequence(rtn_df_test)   # 이 데이터는 학습에 사용하지 않는다.\n"," \n","print(\"# 수익률 sequence 데이터를 생성했습니다.\")\n","\n","# 2. 학습에 사용할 데이터를 생성한다.\n","# -------------------------------\n","# 다음 기간 (N_FUTURE 기간)을 학습/예측하도록 데이터를 구성한다.\n","xc_train = np.array([x[:N_TIME] for x in rtn_train])\n","xf_train = np.array([x[-N_FUTURE:] for x in rtn_train])\n","                     \n","xc_test = np.array([x[:N_TIME] for x in rtn_test])\n","xf_test = np.array([x[-N_FUTURE:] for x in rtn_test])\n","\n","# 4.performace_test.py에서 성과 차트를 그릴 때 x축 인덱스로 사용하기 위해\n","# xf_test[0][0] 위치부터 끝까지 날짜를 기록해 둔다.\n","test_date = rtn_df_test[N_TIME:].index\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y1khF2tqruF4","executionInfo":{"status":"ok","timestamp":1652770464000,"user_tz":-540,"elapsed":5130,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"bcce6218-93fa-4db9-83a4-0f41961b2c67"},"execution_count":193,"outputs":[{"output_type":"stream","name":"stdout","text":["# 수익률 sequence 데이터를 생성했습니다.\n"]}]},{"cell_type":"markdown","source":["# 모델 학습"],"metadata":{"id":"7IXSKp4-BJiH"}},{"cell_type":"code","source":["# random seed 값 고정\n","np.random.seed(3)\n","tf.random.set_seed(3)"],"metadata":{"id":"YxmTk4eri2Ul","executionInfo":{"status":"ok","timestamp":1652770464001,"user_tz":-540,"elapsed":13,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":194,"outputs":[]},{"cell_type":"code","source":["# 월간 수익률 정도의 스케일로 변환한다\n","xc_train = xc_train.astype('float32') *100\n","xf_train = xf_train.astype('float32') *100\n","xc_test = xc_test.astype('float32') *100\n","xf_test = xf_test.astype('float32') *100\n","\n","N_TIME = xc_train.shape[1]\n","N_FUTURE = xf_train.shape[1]\n","N_STOCKS = xf_train.shape[2]\n","\n","# 학습 데이터는 shuffling 한다.\n","#xc_train, xf_train = shuffle(xc_train, xf_train)\n","\n","# Markowitz Network를 생성한다.\n","# over confidence를 제어할 조절 변수 정의\n","GAMMA_CONST = -0.5\n","REG_CONST = 0.1\n","SAVE_MODEL = 'data/3-1.MPN_LSTM.h5'\n","\n","# 최적 포트폴리오를 구축할 목표 함수를 정의한다.\n","# Markowitz Network에서는 이 함수를 loss로 이용한다. max(objective) = min(-objective)\n","# y_pred = 마코비츠 네트워크의 출력이 전달된다. (keras 내부 기능)\n","# y_true = model.fit()에서 전달된 N_FUTURE일 후의 수익률 (xf_train)이 들어온다.\n","def markowitz_objective(y_true, y_pred):\n","    W = y_pred      # 마코비츠 네트워크의 출력\n","    xf_rtn = y_true\n","    W = tf.expand_dims(W, axis = 1)   # W = (None, 1, 50)\n","    R = tf.expand_dims(tf.reduce_mean(xf_rtn, axis = 1), axis = 2) # R = (None, 50, 1)\n","    C = tfp.stats.covariance(xf_rtn, sample_axis=1)\n","\n","    rtn = tf.matmul(W, R)  \n","    vol = tf.matmul(W, tf.matmul(C, tf.transpose(W, perm = [0, 2, 1]))) * GAMMA_CONST\n","    reg = tf.reduce_sum(tf.square(W), axis = -1) * REG_CONST\n","    objective = rtn - vol - reg\n","    \n","    return -tf.reduce_sum(objective, axis=0)\n","\n","\n","lstm = LSTM( units = 7, # units의 값은 layer 통일이 제일 효과적이다.\n","             input_shape=(N_TIME, N_STOCKS),  #(4980, 20, 5)  --> (20,5),    \n","             dropout=0.0,\n","             recurrent_dropout=0.0,\n","             return_sequences=False\n","      )\n","model = Sequential()\n","model.add( lstm )\n","model.add( Dense(N_STOCKS, activation='tanh') )\n","model.add(Activation('softmax'))\n","\n","\n","# 마코비츠의 최적 weights\n","with tf.device(\"/device:GPU:0\"):\n","    #y_output = Activation('softmax')(y_output)\n","\n","    \n","    model.compile(loss = markowitz_objective, \n","                optimizer = Adam(learning_rate = 1e-5),\n","                )\n","    stop = EarlyStopping(patience=10, monitor='val_loss')\n","\n","    model.summary()\n","\n","    # MPN을 학습하고 결과를 저장한다.\n","    hist = model.fit(xc_train, xf_train, epochs=1000, batch_size = 64, \n","                      validation_data = (xc_test, xf_test))\n","    #model.save(SAVE_MODEL)\n","\n","# loss trajectory를 확인한다.\n","plt.figure(figsize=(8, 5))\n","plt.plot(hist.history['loss'], label='Train loss')\n","plt.plot(hist.history['val_loss'], label='Test loss')\n","plt.legend()\n","plt.show()\n","\n","plt.figure(figsize=(8, 5))\n","plt.plot(np.negative(hist.history['loss']), label='Train loss')\n","plt.plot(np.negative(hist.history['val_loss']), label='Test loss')\n","plt.legend()\n","plt.show()\n","\n","# 최적 포트폴리오 결과 확인용 코드\n","def check_w(n = 0):\n","    plt.figure(figsize=(8, 4))\n","    y_pred = model.predict(xc_test[n].reshape(1, N_TIME, N_STOCKS))[0]\n","    plt.bar(np.arange(N_STOCKS), y_pred, alpha = 0.7)\n","    plt.show()\n","    \n","check_w(0)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":720},"id":"Yqg7w_M3Yr2Q","outputId":"34863c33-2ae4-465d-c392-b6378ac33701","executionInfo":{"status":"error","timestamp":1652770486570,"user_tz":-540,"elapsed":5666,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":195,"outputs":[{"output_type":"stream","name":"stdout","text":["55/55 [==============================] - 1s 12ms/step - loss: -17.3848 - val_loss: -12.8877\n","Epoch 21/1000\n","55/55 [==============================] - 1s 11ms/step - loss: -17.4787 - val_loss: -12.9006\n","Epoch 22/1000\n","55/55 [==============================] - 1s 12ms/step - loss: -17.5046 - val_loss: -12.9132\n","Epoch 23/1000\n","55/55 [==============================] - 1s 11ms/step - loss: -17.5279 - val_loss: -12.9260\n","Epoch 24/1000\n","55/55 [==============================] - 1s 12ms/step - loss: -17.5888 - val_loss: -12.9390\n","Epoch 25/1000\n","55/55 [==============================] - 1s 12ms/step - loss: -17.6354 - val_loss: -12.9520\n","Epoch 26/1000\n","55/55 [==============================] - 1s 11ms/step - loss: -17.6869 - val_loss: -12.9651\n","Epoch 27/1000\n","55/55 [==============================] - 1s 11ms/step - loss: -17.7444 - val_loss: -12.9783\n","Epoch 28/1000\n"," 6/55 [==>...........................] - ETA: 0s - loss: -16.7341"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-195-4ecd0f3b739e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;31m# MPN을 학습하고 결과를 저장한다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     hist = model.fit(xc_train, xf_train, epochs=1000, batch_size = 64, \n\u001b[0;32m---> 65\u001b[0;31m                       validation_data = (xc_test, xf_test))\n\u001b[0m\u001b[1;32m     66\u001b[0m     \u001b[0;31m#model.save(SAVE_MODEL)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":[""],"metadata":{"id":"sSmuDBwnln6D","executionInfo":{"status":"aborted","timestamp":1652770486568,"user_tz":-540,"elapsed":9,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"4Xb8LCX1lnnO","executionInfo":{"status":"aborted","timestamp":1652770486569,"user_tz":-540,"elapsed":9,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 백테스팅"],"metadata":{"id":"pmLV1BAiBPPB"}},{"cell_type":"code","source":["import os\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n","\n","# Markowitz's Portfolio Network (MPN)을 이용해서 최적 포트폴리오를 구축한다.\n","import numpy as np\n","import pandas as pd\n","import pickle\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import load_model\n","\n","\n","N_TIME = xc_test.shape[1]\n","N_FUTURE = xf_test.shape[1]\n","N_STOCKS = xf_test.shape[2]\n","\n","# 저장된 모델을 가져온다.\n","lstm_model = model\n","\n","# MPN을 이용해서 백 테스트를 수행한다.\n","# --------------------------------\n","lstm_value = [10000]   # portfolio의 초기 value\n","crp_value = [10000]   # CRP의 초기 value\n","w_crp = np.ones(N_STOCKS) / N_STOCKS   # CRP 비율 (균등 비율)\n","\n","w_hist_lstm = []\n","for i in range(0, xc_test.shape[0], N_FUTURE):\n","    # LSTM으로 W를 추정한다.\n","    x = xc_test[i][np.newaxis,:, :]\n","    w_lstm = lstm_model.predict(x)[0]\n","    w_hist_lstm.append(w_lstm)\n","    \n","    # 다음 기의 누적 수익률\n","    m_rtn = np.sum(xf_test[i]/100, axis = 0)\n","    \n","    # 누적 수익률과 w_prt (W)로 포트폴리오의 수익률을 계산한다.\n","    lstm_value.append(lstm_value[-1] * np.exp(np.dot(w_lstm, m_rtn)))\n","    crp_value.append(crp_value[-1] * np.exp(np.dot(w_crp, m_rtn)))\n","\n","print('\\nBack test를 완료했습니다.')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_NiqJc5xut8o","executionInfo":{"status":"ok","timestamp":1652770361861,"user_tz":-540,"elapsed":1507,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"474678a6-2eeb-44b1-d472-54e332e90936"},"execution_count":185,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Back test를 완료했습니다.\n"]}]},{"cell_type":"markdown","source":["# 포트폴리오 성과 평가"],"metadata":{"id":"9UIA48BWBSxO"}},{"cell_type":"code","source":["# 평가 시점의 날짜를 발췌한다.\n","idx = np.arange(0, len(test_date), N_FUTURE)\n","\n","# Markowitz 성과와 CRP 성과를 데이터 프레임에 기록해 둔다.\n","perf_df = pd.DataFrame({'crp':crp_value, \n","                        'lstm_markowitz':lstm_value\n","                        }, \n","                       index=test_date[idx])\n","\n","# S&P500 index와 포트폴리오 성과를 비교해 본다.\n","sp500 = pd.DataFrame(df3['코스피'])\n","\n","# 수익률을 계산해서 perf_df와 시작 위치를 맞춘다 (초기 value를 맞춘다).\n","sp500 = sp500[test_date[0]:]\n","sp_trans = lstm_value[0] / sp500['코스피'][0]\n","perf_df['kospi'] = sp500['코스피'] * sp_trans\n","\n","# S&P500 index (시장), CRP, 그리고 MPN의 성과를 비교한다.\n","p = perf_df.plot(figsize=(12, 7), style = '-o', fontsize=12)\n","plt.legend(fontsize=12)\n","plt.show()\n","\n","# weights history를 확인한다.\n","w_hist_lstm = np.array(w_hist_lstm)\n","\n","# 종목 이름을 읽어온다.\n","symbol = rtn_df.columns\n","\n","n = 7\n","plt.figure(figsize=(12, 4))\n","for i in range(n):\n","    plt.plot(w_hist_lstm[:, i], label=symbol[i])\n","plt.legend(loc='upper left')\n","plt.title('W history by LSTM')\n","plt.xticks(np.arange(0, 20), list(perf_df.index[1:]), rotation='vertical')\n","plt.show()\n","\n","# 포트폴리오 수익률, 위험, SR을 측정한다.\n","rp_df = perf_df.copy()\n","rp_df['crp_rtn'] = np.log(rp_df['crp']) - np.log(rp_df['crp'].shift(1))\n","rp_df['lstm_rtn'] = np.log(rp_df['lstm_markowitz']) - np.log(rp_df['lstm_markowitz'].shift(1))\n","rp_df['sp500_rtn'] = np.log(rp_df['kospi']) - np.log(rp_df['kospi'].shift(1))\n","rp_df = rp_df.dropna()\n","\n","# 포트폴리오 수익률 (연간)\n","rp = rp_df[[\n","            'crp_rtn', \n","            'lstm_rtn', 'sp500_rtn']].mean()\n","# 20일 = 약 1개월, 1년 = 12개월\n","rp*=12\n","print('\\n포트폴리오 수익률 (연간):')\n","print(rp)\n","\n","# 포트폴리오 위험 (연간 표준편차)\n","sp = rp_df[[\n","            'crp_rtn', \n","            'lstm_rtn', 'sp500_rtn']].std()\n","print('\\n포트폴리오 위험 (연간):')\n","print(sp)\n","\n","# Sharp ratio\n","print('\\nSharp Ratio :')\n","print(rp / sp)\n","\n","# 최적 포트폴리오 결과 확인용 코드 (참고용)\n","def check_w(n = 0):\n","    plt.figure(figsize=(14,5))\n","    x = xc_test[n][np.newaxis,:,:] * 20.0\n","    w_lstm = lstm_model.predict(x)[0]\n","    plt.bar(np.arange(N_STOCKS), w_lstm, alpha = 0.7)\n","    plt.xticks(np.arange(7), list(symbol), rotation='vertical')\n","    plt.title('W by LSTM')\n","    plt.show()\n","    \n","check_w(0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"naVGBd18uuh5","executionInfo":{"status":"ok","timestamp":1652770362471,"user_tz":-540,"elapsed":615,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"d178df93-dae2-43aa-fb77-f11a257c9ff1"},"execution_count":186,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","포트폴리오 수익률 (연간):\n","crp_rtn      0.238060\n","lstm_rtn     0.316615\n","sp500_rtn    0.439246\n","dtype: float64\n","\n","포트폴리오 위험 (연간):\n","crp_rtn      0.021114\n","lstm_rtn     0.031667\n","sp500_rtn    0.046462\n","dtype: float64\n","\n","Sharp Ratio :\n","crp_rtn      11.275181\n","lstm_rtn      9.998166\n","sp500_rtn     9.453866\n","dtype: float64\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# 가중치 데이터 저장"],"metadata":{"id":"m0rCDApfIr_6"}},{"cell_type":"code","source":["W_df=pd.DataFrame(w_hist_lstm,columns=symbol,index=list(perf_df.index[1:]))\n","W_df.head()\n","W_df.to_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/상승/비중DF/기간\"+str(perf_df.index[1])[:10]+\"-\"+str(perf_df.index[-1])[:10]+\"감마\"+str(GAMMA_CONST)+\"REG\"+str(REG_CONST)+\"가중치.csv\")\n"],"metadata":{"id":"nYDGXzwFSeAd","executionInfo":{"status":"ok","timestamp":1652770362472,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":187,"outputs":[]},{"cell_type":"markdown","source":["# 타 펀드 비교(KB)"],"metadata":{"id":"gCBhQKGlWoHG"}},{"cell_type":"code","source":["kb=pd.read_excel(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/kb아무것도못하쥬.xlsx\")\n","kb.일자=pd.to_datetime(kb.일자)\n","kb=kb.set_index('일자')\n","#일자설정\n","kb=kb.loc[perf_df.index[0]:perf_df.index[-1]]\n","kb['금액']=10000\n","kb['수익률(%)']=kb['수익률(%)']*0.01\n","for i in range(1,kb.shape[0]):\n","    kb.iloc[i,1]=kb.iloc[i,0]*kb.iloc[i-1,1]+kb.iloc[i-1,1]\n","p_df=perf_df.copy()\n","p_df=p_df.reset_index()\n","kb=kb.reset_index()\n","grp=pd.merge(p_df,kb,left_on='Date',right_on='일자',how='outer')\n","grp=grp.set_index('Date')\n","grp=grp[['crp', 'lstm_markowitz', 'kospi', '금액']]\n","grp.columns=['crp', 'lstm_markowitz', 'kospi', 'KB펀드']\n","grp=grp.dropna()"],"metadata":{"id":"329Yj5IDSd06","executionInfo":{"status":"ok","timestamp":1652770362472,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":188,"outputs":[]},{"cell_type":"markdown","source":["# 타 펀드 비교 <미래에셋>"],"metadata":{"id":"NZLVULMeDGxu"}},{"cell_type":"code","source":["fa=pd.read_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/미래에셋.csv\")\n","fa=fa.T\n","fa=fa.iloc[1:]\n","fa=fa.reset_index()\n","fa['index']=pd.to_datetime(fa['index'])\n","fa=fa.set_index('index')\n","fa.columns=['투자수익률','비교지수']\n","fa['미래에셋']=fa['투자수익률']*0.01*10000+10000\n","fa['미래에셋_pct']=fa['미래에셋'].pct_change(1)\n","#일자설정\n","fa=fa.loc[perf_df.index[0]:perf_df.index[-1]]\n","fa['미래에셋']=10000\n","for i in range(1,fa.shape[0]):\n","    fa.iloc[i,2]=fa.iloc[i,3]*fa.iloc[i-1,2]+fa.iloc[i-1,2]\n","fa=fa.reset_index()\n","fa['index']=pd.to_datetime(fa['index'])\n","grp=pd.merge(grp.reset_index(),fa[['index','미래에셋']],left_on='Date',right_on='index',how='outer')\n","grp=grp[['Date','lstm_markowitz','kospi','미래에셋','KB펀드']]\n","grp=grp.dropna()\n","grp=grp.set_index('Date')"],"metadata":{"id":"_aH8bfLQDKS8","executionInfo":{"status":"ok","timestamp":1652770362833,"user_tz":-540,"elapsed":365,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":189,"outputs":[]},{"cell_type":"markdown","source":["# 차트 이미지 저장"],"metadata":{"id":"Jv70FOK4LFEl"}},{"cell_type":"code","source":["p = grp.plot(figsize=(12, 7), style = '-o', fontsize=12)\n","p.legend(fontsize=12)\n","plt.savefig(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/상승/차트/기간\"+str(perf_df.index[1])[:10]+\"-\"+str(perf_df.index[-1])[:10]+\"감마\"+str(GAMMA_CONST)+\"REG\"+str(REG_CONST)+\"가중치.png\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"QSrfSH44fOa-","executionInfo":{"status":"ok","timestamp":1652770363428,"user_tz":-540,"elapsed":596,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"db676063-f39b-488f-90dc-6334b41bccf9"},"execution_count":190,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}