{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"민형.ipynb의 사본","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# IMPORT"],"metadata":{"id":"GZvXBMxtAuvB"}},{"cell_type":"code","source":["! pip install matplotlib"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2gKE35mtYyW","executionInfo":{"status":"ok","timestamp":1652685387094,"user_tz":-540,"elapsed":7702,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"eff613ed-394b-41d2-e9a9-8142eb3c0431"},"execution_count":139,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.8)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.2)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.21.6)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib) (4.2.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib) (1.15.0)\n"]}]},{"cell_type":"code","execution_count":140,"metadata":{"id":"GODiobNZUnZo","executionInfo":{"status":"ok","timestamp":1652685387095,"user_tz":-540,"elapsed":10,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","source":["import os\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n","import numpy as np\n","import pickle\n","import tensorflow as tf\n","import tensorflow_probability as tfp\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.layers import Input, LSTM, Dense, Activation\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.utils import shuffle\n","from keras.models import Sequential\n","from keras.layers import Dense, LSTM\n","from keras import optimizers\n","from keras.callbacks import EarlyStopping, ModelCheckpoint"],"metadata":{"id":"eP3-orgFsG_a","executionInfo":{"status":"ok","timestamp":1652685387095,"user_tz":-540,"elapsed":9,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":141,"outputs":[]},{"cell_type":"code","source":["# 한글폰트 사용 in colab\n","%matplotlib inline  \n","\n","import matplotlib as mpl \n","import matplotlib.pyplot as plt \n","import matplotlib.font_manager as fm  \n","\n","!apt-get update -qq\n","!apt-get install fonts-nanum* -qq\n","\n","path = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf' \n","font_name = fm.FontProperties(fname=path, size=10).get_name()\n","print(font_name)\n","plt.rc('font', family=font_name)\n","\n","fm._rebuild()\n","mpl.rcParams['axes.unicode_minus'] = False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":398},"id":"wf-N5pQ-9wwx","executionInfo":{"status":"error","timestamp":1652685398471,"user_tz":-540,"elapsed":11384,"user":{"displayName":"김민형","userId":"04715177399584409641"}},"outputId":"b09314e5-2ab4-40df-ec1c-799a042076c1"},"execution_count":142,"outputs":[{"output_type":"stream","name":"stdout","text":["NanumBarunGothic\n"]},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-142-16fc51693902>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'font'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfont_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mfm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rebuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0mmpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'axes.unicode_minus'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/font_manager.py\u001b[0m in \u001b[0;36m_rebuild\u001b[0;34m()\u001b[0m\n\u001b[1;32m   1333\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0mfontManager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1334\u001b[0m     \u001b[0mfontManager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFontManager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1335\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_fmcache\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1336\u001b[0m         \u001b[0mjson_dump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfontManager\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_fmcache\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1337\u001b[0m     \u001b[0m_log\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generated new fontManager\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    110\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 112\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    113\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't yield\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py\u001b[0m in \u001b[0;36m_lock_path\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m   1819\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1820\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1821\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mlock_path\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"xb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1822\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1823\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mFileExistsError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/pathlib.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, mode, buffering, encoding, errors, newline)\u001b[0m\n\u001b[1;32m   1206\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1207\u001b[0m         return io.open(self, mode, buffering, encoding, errors, newline,\n\u001b[0;32m-> 1208\u001b[0;31m                        opener=self._opener)\n\u001b[0m\u001b[1;32m   1209\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1210\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mread_bytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/pathlib.py\u001b[0m in \u001b[0;36m_opener\u001b[0;34m(self, name, flags, mode)\u001b[0m\n\u001b[1;32m   1061\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0o666\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1062\u001b[0m         \u001b[0;31m# A stub for the opener argument to built-in open()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1063\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1064\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1065\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_raw_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0o777\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/root/.cache/matplotlib/fontlist-v310.json.matplotlib-lock'"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"id":"_haNy6NFVMXD","executionInfo":{"status":"aborted","timestamp":1652685398010,"user_tz":-540,"elapsed":18,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# DATA LOAD"],"metadata":{"id":"RHTwRHyYAxpQ"}},{"cell_type":"code","source":["rtn_df=pd.read_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/최종데이터셋.csv\")"],"metadata":{"id":"H-V5SmX7xz8d","executionInfo":{"status":"aborted","timestamp":1652685398012,"user_tz":-540,"elapsed":19,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# rtn_df"],"metadata":{"id":"uRRm1v9cj7sd","executionInfo":{"status":"aborted","timestamp":1652685398013,"user_tz":-540,"elapsed":20,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df3=rtn_df[['Date','코스피']]\n","df3.Date=pd.to_datetime(df3.Date)\n","df3=df3.set_index('Date')"],"metadata":{"id":"IWW8kAr3C5KT","executionInfo":{"status":"aborted","timestamp":1652685398014,"user_tz":-540,"elapsed":21,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtn_df['Date']=pd.to_datetime(rtn_df['Date'])\n","rtn_df=rtn_df.set_index('Date')\n","rtn_df=rtn_df[['단기채로그', '중기채로그', 'ksp로그', 'iau로그', 'dbc로그', 'vnq로그', 'nsd로그']]"],"metadata":{"id":"mVgtVlFnyHFQ","executionInfo":{"status":"aborted","timestamp":1652685398015,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtn_df"],"metadata":{"id":"4DwS3y6aB1wy","executionInfo":{"status":"aborted","timestamp":1652685398015,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 하락장 예측 train, test\n","\n","<pre>\n","\n","하락장 : 2020-02-26 ~ 2020-04-06\n","상승장 : 2020-04-06 ~ 2020-06-26\n","1. MACD 하락 - 상승 : 2020-02-26 ~ 2020-06-26 \n","2. 종가 하락 - 상승 : 2020-02-26 ~ 2020-06-05"],"metadata":{"id":"cQOwyR9ZeWda"}},{"cell_type":"code","source":["rtn_df_train=rtn_df.loc[:'2019-10-31'] # Train set\n","rtn_df_test=rtn_df.loc['2019-11-01':'2022-05-10']  # Test set\n"],"metadata":{"id":"8bN2yuF54i4D","executionInfo":{"status":"aborted","timestamp":1652685398015,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtn_df_train"],"metadata":{"id":"EauVKOUDxg2x","executionInfo":{"status":"aborted","timestamp":1652685398016,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 학습 데이터 생성"],"metadata":{"id":"rXzASH8oBFoU"}},{"cell_type":"code","source":["# Markowitz's Portfolio Network (MPN)을 이용해서 최적 포트폴리오를 구축한다.\n","#\n","# 1. 학습 데이터와 평가 데이터 생성 모듈.\n","#\n","# 참고 : https://blog.naver.com/chunjein/222492404960/\n","#        https://blog.naver.com/chunjein/222494724278\n","#        https://blog.naver.com/chunjein/222496640766\n","#\n","# 2021.08.27   blog.naver.com/chunjein (조성현)\n","# ------------------------------------------------------------------------\n","import pandas as pd\n","import numpy as np\n","import pickle\n","\n","\n","N_STOCKS = 7  # 포트폴리오를 구성할 주식 종목 개수\n","N_TIME = 20    # look back window size\n","N_FUTURE = 20  # 미래 20 기간의 최적 포트폴리오를 추정할 예정이다.\n","\n","\n","# 1. 학습과 performance-test에 사용할 데이터를 생성한다.\n","# --------------------------------------------------\n","# 수익률 sequence 데이터를 생성한다.\n","def make_sequence(x):\n","    T = N_TIME + N_FUTURE\n","    x_seq = np.expand_dims(np.array(x.iloc[0:T, :]), 0)\n","    \n","    for i in range(1, len(x) - T + 1):\n","        d = np.expand_dims(np.array(x.iloc[i:(i+T), :]), 0)\n","        x_seq = np.concatenate((x_seq, d))\n","        \n","    return x_seq\n","\n","# 학습 데이터와 시험 데이터를 생성한다. 시험 데이터는 향후 performance test용으로\n","# 사용한다. 학습 데이터 80%, 시험 데이터 20%\n","n = int(rtn_df.shape[0] * 0.9)\n","rtn_train = make_sequence(rtn_df_train)\n","rtn_test = make_sequence(rtn_df_test)   # 이 데이터는 학습에 사용하지 않는다.\n"," \n","print(\"# 수익률 sequence 데이터를 생성했습니다.\")\n","\n","# 2. 학습에 사용할 데이터를 생성한다.\n","# -------------------------------\n","# 다음 기간 (N_FUTURE 기간)을 학습/예측하도록 데이터를 구성한다.\n","xc_train = np.array([x[:N_TIME] for x in rtn_train])\n","xf_train = np.array([x[-N_FUTURE:] for x in rtn_train])\n","                     \n","xc_test = np.array([x[:N_TIME] for x in rtn_test])\n","xf_test = np.array([x[-N_FUTURE:] for x in rtn_test])\n","\n","# 4.performace_test.py에서 성과 차트를 그릴 때 x축 인덱스로 사용하기 위해\n","# xf_test[0][0] 위치부터 끝까지 날짜를 기록해 둔다.\n","test_date = rtn_df_test[N_TIME:].index\n"],"metadata":{"id":"y1khF2tqruF4","executionInfo":{"status":"aborted","timestamp":1652685398016,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 데이터셋 나눠서 만들기(상승)\n"],"metadata":{"id":"mALEKSsEy85O"}},{"cell_type":"code","source":["df=pd.read_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/최종데이터셋.csv\")\n","df['Date']=pd.to_datetime(df['Date'])\n","df=df.set_index('Date')"],"metadata":{"id":"-eu4MKJ7yxfp","executionInfo":{"status":"aborted","timestamp":1652685398016,"user_tz":-540,"elapsed":21,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df=df[['단기채로그', '중기채로그', 'ksp로그', 'iau로그', 'dbc로그', 'vnq로그', 'nsd로그']]"],"metadata":{"id":"iCVMif_241w5","executionInfo":{"status":"aborted","timestamp":1652685398017,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["up_2006=df.loc['2006-10-02':'2007-10-31']\n","up_2009=df.loc['2009-01-02':'2010-01-29']\n","up_2012=df.loc['2012-03-01':'2013-09-30']\n","up_2014=df.loc['2014-09-01':'2015-05-29']\n","up_2015=df.loc['2015-10-01':'2016-01-29']\n","up_2016=df.loc['2016-05-02':'2017-06-30']\n","up_2019=df.loc['2019-12-02':'2020-03-31']\n","#up_2020=df.loc['2020-07-01':'2021-08-31']"],"metadata":{"id":"Vj2aJU95zMw2","executionInfo":{"status":"aborted","timestamp":1652685398017,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#기간별 잘라서 train셋 만들기\n","T = N_TIME + N_FUTURE\n","x_seq = np.expand_dims(np.array(up_2006.iloc[0:T, :]), 0)\n","\n","for i in range(1, len(up_2006) - T + 1):\n","    d = np.expand_dims(np.array(up_2006.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(up_2009) - T + 1):\n","    d = np.expand_dims(np.array(up_2009.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(up_2012) - T + 1):\n","    d = np.expand_dims(np.array(up_2012.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(up_2014) - T + 1):\n","    d = np.expand_dims(np.array(up_2014.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(up_2015) - T + 1):\n","    d = np.expand_dims(np.array(up_2015.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(up_2016) - T + 1):\n","    d = np.expand_dims(np.array(up_2016.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(up_2019) - T + 1):\n","    d = np.expand_dims(np.array(up_2019.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","#for i in range(0, len(up_2020) - T + 1):\n","    #d = np.expand_dims(np.array(up_2020.iloc[i:(i+T), :]), 0)\n","    #x_seq = np.concatenate((x_seq, d))"],"metadata":{"id":"577kXTG3yljZ","executionInfo":{"status":"aborted","timestamp":1652685398017,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##  데이터셋 나눠서 만들기(하강)\n"],"metadata":{"id":"nX5ecKbgbalu"}},{"cell_type":"code","source":["df=pd.read_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/최종데이터셋.csv\")\n","df['Date']=pd.to_datetime(df['Date'])\n","df=df.set_index('Date')"],"metadata":{"id":"PDdwm9v5lO3H","executionInfo":{"status":"aborted","timestamp":1652685398017,"user_tz":-540,"elapsed":21,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df=df[df['상승']==0]"],"metadata":{"id":"UBjlUFRUlO3O","executionInfo":{"status":"aborted","timestamp":1652685398018,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df=df[['단기채로그', '중기채로그', 'ksp로그', 'iau로그', 'dbc로그', 'vnq로그', 'nsd로그']]"],"metadata":{"id":"O-RFd7wslO3P","executionInfo":{"status":"aborted","timestamp":1652685398018,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["down_2006=df.loc['2006-03-01':'2006-09-29']\n","down_2007=df.loc['2007-11-01':'2008-12-31']\n","down_2010=df.loc['2010-02-01':'2012-02-29']\n","down_2013=df.loc['2013-10-01':'2014-08-29']\n","down_2015=df.loc['2015-06-01':'2015-09-30']\n","down_2016=df.loc['2016-02-01':'2016-04-29']\n","down_2017=df.loc['2017-07-03':'2019-11-29']\n","down_2020=df.loc['2020-04-01':'2020-06-30']\n","#down_2021=df.loc['2021-09-01':'2022-05-10']"],"metadata":{"id":"H1KqtpP3V8F9","executionInfo":{"status":"aborted","timestamp":1652685398018,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#기간별 잘라서 train셋 만들기\n","T = N_TIME + N_FUTURE\n","x_seq = np.expand_dims(np.array(down_2006.iloc[0:T, :]), 0)\n","\n","for i in range(1, len(down_2006) - T + 1):\n","    d = np.expand_dims(np.array(down_2006.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2007) - T + 1):\n","    d = np.expand_dims(np.array(down_2007.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2010) - T + 1):\n","    d = np.expand_dims(np.array(down_2010.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2013) - T + 1):\n","    d = np.expand_dims(np.array(down_2013.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2015) - T + 1):\n","    d = np.expand_dims(np.array(down_2015.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2016) - T + 1):\n","    d = np.expand_dims(np.array(down_2016.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2017) - T + 1):\n","    d = np.expand_dims(np.array(down_2017.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","for i in range(0, len(down_2020) - T + 1):\n","    d = np.expand_dims(np.array(down_2020.iloc[i:(i+T), :]), 0)\n","    x_seq = np.concatenate((x_seq, d))\n","# for i in range(0, len(down_2021) - T + 1):\n","#     d = np.expand_dims(np.array(down_2021.iloc[i:(i+T), :]), 0)\n","#     x_seq = np.concatenate((x_seq, d))"],"metadata":{"id":"NNBKUxocbZnd","executionInfo":{"status":"aborted","timestamp":1652685398019,"user_tz":-540,"elapsed":23,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## rtn_train 구성하기"],"metadata":{"id":"A047anhKb6Oh"}},{"cell_type":"code","source":["# rtn_train 값에 기간별로 자른 값 집어넣기\n","rtn_train = x_seq\n","xc_train = np.array([x[:N_TIME] for x in rtn_train])\n","xf_train = np.array([x[-N_FUTURE:] for x in rtn_train])"],"metadata":{"id":"I-LKZ8075o2V","executionInfo":{"status":"aborted","timestamp":1652685398466,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 모델 학습"],"metadata":{"id":"7IXSKp4-BJiH"}},{"cell_type":"code","source":["# random seed 값 고정\n","np.random.seed(3)\n","tf.random.set_seed(3)"],"metadata":{"id":"YxmTk4eri2Ul","executionInfo":{"status":"aborted","timestamp":1652685398466,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 월간 수익률 정도의 스케일로 변환한다\n","xc_train = xc_train.astype('float32') *100\n","xf_train = xf_train.astype('float32') *100\n","xc_test = xc_test.astype('float32') *100\n","xf_test = xf_test.astype('float32') *100\n","\n","N_TIME = xc_train.shape[1]\n","N_FUTURE = xf_train.shape[1]\n","N_STOCKS = xf_train.shape[2]\n","\n","# 학습 데이터는 shuffling 한다.\n","#xc_train, xf_train = shuffle(xc_train, xf_train)\n","\n","# Markowitz Network를 생성한다.\n","# over confidence를 제어할 조절 변수 정의\n","GAMMA_CONST = 0.77\n","REG_CONST = 0.0\n","SAVE_MODEL = 'data/3-1.MPN_LSTM.h5'\n","\n","# 최적 포트폴리오를 구축할 목표 함수를 정의한다.\n","# Markowitz Network에서는 이 함수를 loss로 이용한다. max(objective) = min(-objective)\n","# y_pred = 마코비츠 네트워크의 출력이 전달된다. (keras 내부 기능)\n","# y_true = model.fit()에서 전달된 N_FUTURE일 후의 수익률 (xf_train)이 들어온다.\n","def markowitz_objective(y_true, y_pred):\n","    W = y_pred      # 마코비츠 네트워크의 출력\n","    xf_rtn = y_true\n","    W = tf.expand_dims(W, axis = 1)   # W = (None, 1, 50)\n","    R = tf.expand_dims(tf.reduce_mean(xf_rtn, axis = 1), axis = 2) # R = (None, 50, 1)\n","    C = tfp.stats.covariance(xf_rtn, sample_axis=1)\n","\n","    rtn = tf.matmul(W, R)  \n","    vol = tf.matmul(W, tf.matmul(C, tf.transpose(W, perm = [0, 2, 1]))) * GAMMA_CONST\n","    reg = tf.reduce_sum(tf.square(W), axis = -1) * REG_CONST\n","    objective = rtn - vol - reg\n","    \n","    return -tf.reduce_sum(objective, axis=0)\n","\n","\n","lstm = LSTM( units = 7, # units의 값은 layer 통일이 제일 효과적이다.\n","             input_shape=(N_TIME, N_STOCKS),  #(4980, 20, 5)  --> (20,5),    \n","             dropout=0.0,\n","             recurrent_dropout=0.0,\n","             return_sequences=False\n","      )\n","model = Sequential()\n","model.add( lstm )\n","model.add( Dense(N_STOCKS, activation='tanh') )\n","model.add(Activation('softmax'))\n","\n","\n","# 마코비츠의 최적 weights\n","with tf.device(\"/device:GPU:0\"):\n","    #y_output = Activation('softmax')(y_output)\n","\n","    \n","    model.compile(loss = markowitz_objective, \n","                optimizer = Adam(learning_rate = 1e-5),\n","                )\n","    stop = EarlyStopping(patience=10, monitor='val_loss')\n","\n","    model.summary()\n","\n","    # MPN을 학습하고 결과를 저장한다.\n","    hist = model.fit(xc_train, xf_train, epochs=1000, batch_size = 64, \n","                      validation_data = (xc_test, xf_test))\n","    #model.save(SAVE_MODEL)\n","\n","# loss trajectory를 확인한다.\n","plt.figure(figsize=(8, 5))\n","plt.plot(hist.history['loss'], label='Train loss')\n","plt.plot(hist.history['val_loss'], label='Test loss')\n","plt.legend()\n","plt.show()\n","\n","plt.figure(figsize=(8, 5))\n","plt.plot(np.negative(hist.history['loss']), label='Train loss')\n","plt.plot(np.negative(hist.history['val_loss']), label='Test loss')\n","plt.legend()\n","plt.show()\n","\n","# 최적 포트폴리오 결과 확인용 코드\n","def check_w(n = 0):\n","    plt.figure(figsize=(8, 4))\n","    y_pred = model.predict(xc_test[n].reshape(1, N_TIME, N_STOCKS))[0]\n","    plt.bar(np.arange(N_STOCKS), y_pred, alpha = 0.7)\n","    plt.show()\n","    \n","check_w(0)\n"],"metadata":{"id":"Yqg7w_M3Yr2Q","executionInfo":{"status":"aborted","timestamp":1652685398467,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 백테스팅"],"metadata":{"id":"pmLV1BAiBPPB"}},{"cell_type":"code","source":["import os\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n","\n","# Markowitz's Portfolio Network (MPN)을 이용해서 최적 포트폴리오를 구축한다.\n","import numpy as np\n","import pandas as pd\n","import pickle\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import load_model\n","\n","\n","N_TIME = xc_test.shape[1]\n","N_FUTURE = xf_test.shape[1]\n","N_STOCKS = xf_test.shape[2]\n","\n","# 저장된 모델을 가져온다.\n","lstm_model = model\n","\n","# MPN을 이용해서 백 테스트를 수행한다.\n","# --------------------------------\n","lstm_value = [10000]   # portfolio의 초기 value\n","crp_value = [10000]   # CRP의 초기 value\n","w_crp = np.ones(N_STOCKS) / N_STOCKS   # CRP 비율 (균등 비율)\n","\n","w_hist_lstm = []\n","for i in range(0, xc_test.shape[0], N_FUTURE):\n","    # LSTM으로 W를 추정한다.\n","    x = xc_test[i][np.newaxis,:, :]\n","    w_lstm = lstm_model.predict(x)[0]\n","    w_hist_lstm.append(w_lstm)\n","    \n","    # 다음 기의 누적 수익률\n","    m_rtn = np.sum(xf_test[i]/100, axis = 0)\n","    \n","    # 누적 수익률과 w_prt (W)로 포트폴리오의 수익률을 계산한다.\n","    lstm_value.append(lstm_value[-1] * np.exp(np.dot(w_lstm, m_rtn)))\n","    crp_value.append(crp_value[-1] * np.exp(np.dot(w_crp, m_rtn)))\n","\n","print('\\nBack test를 완료했습니다.')\n"],"metadata":{"id":"_NiqJc5xut8o","executionInfo":{"status":"aborted","timestamp":1652685398467,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 포트폴리오 성과 평가"],"metadata":{"id":"9UIA48BWBSxO"}},{"cell_type":"code","source":["# 평가 시점의 날짜를 발췌한다.\n","idx = np.arange(0, len(test_date), N_FUTURE)\n","\n","# Markowitz 성과와 CRP 성과를 데이터 프레임에 기록해 둔다.\n","perf_df = pd.DataFrame({'crp':crp_value, \n","                        'lstm_markowitz':lstm_value\n","                        }, \n","                       index=test_date[idx])\n","\n","# S&P500 index와 포트폴리오 성과를 비교해 본다.\n","sp500 = pd.DataFrame(df3['코스피'])\n","\n","# 수익률을 계산해서 perf_df와 시작 위치를 맞춘다 (초기 value를 맞춘다).\n","sp500 = sp500[test_date[0]:]\n","sp_trans = lstm_value[0] / sp500['코스피'][0]\n","perf_df['kospi'] = sp500['코스피'] * sp_trans\n","\n","# S&P500 index (시장), CRP, 그리고 MPN의 성과를 비교한다.\n","p = perf_df.plot(figsize=(12, 7), style = '-o', fontsize=12)\n","plt.legend(fontsize=12)\n","plt.show()\n","\n","# weights history를 확인한다.\n","w_hist_lstm = np.array(w_hist_lstm)\n","\n","# 종목 이름을 읽어온다.\n","symbol = rtn_df.columns\n","\n","n = 7\n","plt.figure(figsize=(12, 4))\n","for i in range(n):\n","    plt.plot(w_hist_lstm[:, i], label=symbol[i])\n","plt.legend(loc='upper left')\n","plt.title('W history by LSTM')\n","plt.xticks(np.arange(0, 20), list(perf_df.index[1:]), rotation='vertical')\n","plt.show()\n","\n","# 포트폴리오 수익률, 위험, SR을 측정한다.\n","rp_df = perf_df.copy()\n","rp_df['crp_rtn'] = np.log(rp_df['crp']) - np.log(rp_df['crp'].shift(1))\n","rp_df['lstm_rtn'] = np.log(rp_df['lstm_markowitz']) - np.log(rp_df['lstm_markowitz'].shift(1))\n","rp_df['sp500_rtn'] = np.log(rp_df['kospi']) - np.log(rp_df['kospi'].shift(1))\n","rp_df = rp_df.dropna()\n","\n","# 포트폴리오 수익률 (연간)\n","rp = rp_df[[\n","            'crp_rtn', \n","            'lstm_rtn', 'sp500_rtn']].mean()\n","# 20일 = 약 1개월, 1년 = 12개월\n","rp*=12\n","print('\\n포트폴리오 수익률 (연간):')\n","print(rp)\n","\n","# 포트폴리오 위험 (연간 표준편차)\n","sp = rp_df[[\n","            'crp_rtn', \n","            'lstm_rtn', 'sp500_rtn']].std()\n","print('\\n포트폴리오 위험 (연간):')\n","print(sp)\n","\n","# Sharp ratio\n","print('\\nSharp Ratio :')\n","print(rp / sp)\n","\n","# 최적 포트폴리오 결과 확인용 코드 (참고용)\n","def check_w(n = 0):\n","    plt.figure(figsize=(14,5))\n","    x = xc_test[n][np.newaxis,:,:] * 20.0\n","    w_lstm = lstm_model.predict(x)[0]\n","    plt.bar(np.arange(N_STOCKS), w_lstm, alpha = 0.7)\n","    plt.xticks(np.arange(7), list(symbol), rotation='vertical')\n","    plt.title('W by LSTM')\n","    plt.show()\n","    \n","check_w(0)"],"metadata":{"id":"naVGBd18uuh5","executionInfo":{"status":"aborted","timestamp":1652685398468,"user_tz":-540,"elapsed":471,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 가중치 데이터 저장"],"metadata":{"id":"m0rCDApfIr_6"}},{"cell_type":"code","source":["W_df=pd.DataFrame(w_hist_lstm,columns=symbol,index=list(perf_df.index[1:]))\n","W_df.head()\n","W_df.to_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/하락/비중DF/기간\"+str(perf_df.index[1])[:10]+\"-\"+str(perf_df.index[-1])[:10]+\"감마\"+str(GAMMA_CONST)+\"REG\"+str(REG_CONST)+\"가중치.csv\")\n"],"metadata":{"id":"nYDGXzwFSeAd","executionInfo":{"status":"aborted","timestamp":1652685398468,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 타 펀드 비교(KB)"],"metadata":{"id":"gCBhQKGlWoHG"}},{"cell_type":"code","source":["kb=pd.read_excel(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/kb아무것도못하쥬.xlsx\")\n","kb.일자=pd.to_datetime(kb.일자)\n","kb=kb.set_index('일자')\n","#일자설정\n","kb=kb.loc[perf_df.index[0]:perf_df.index[-1]]\n","kb['금액']=10000\n","kb['수익률(%)']=kb['수익률(%)']*0.01\n","for i in range(1,kb.shape[0]):\n","    kb.iloc[i,1]=kb.iloc[i,0]*kb.iloc[i-1,1]+kb.iloc[i-1,1]\n","p_df=perf_df.copy()\n","p_df=p_df.reset_index()\n","kb=kb.reset_index()\n","grp=pd.merge(p_df,kb,left_on='Date',right_on='일자',how='outer')\n","grp=grp.set_index('Date')\n","grp=grp[['crp', 'lstm_markowitz', 'kospi', '금액']]\n","grp.columns=['crp', 'lstm_markowitz', 'kospi', 'KB펀드']\n","grp=grp.dropna()"],"metadata":{"id":"329Yj5IDSd06","executionInfo":{"status":"aborted","timestamp":1652685398469,"user_tz":-540,"elapsed":471,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 타 펀드 비교 <미래에셋>"],"metadata":{"id":"NZLVULMeDGxu"}},{"cell_type":"code","source":["fa=pd.read_csv(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/미래에셋.csv\")\n","fa=fa.T\n","fa=fa.iloc[1:]\n","fa=fa.reset_index()\n","fa['index']=pd.to_datetime(fa['index'])\n","fa=fa.set_index('index')\n","fa.columns=['투자수익률','비교지수']\n","fa['미래에셋']=fa['투자수익률']*0.01*10000+10000\n","fa['미래에셋_pct']=fa['미래에셋'].pct_change(1)\n","#일자설정\n","fa=fa.loc[perf_df.index[0]:perf_df.index[-1]]\n","fa['미래에셋']=10000\n","for i in range(1,fa.shape[0]):\n","    fa.iloc[i,2]=fa.iloc[i,3]*fa.iloc[i-1,2]+fa.iloc[i-1,2]\n","fa=fa.reset_index()\n","fa['index']=pd.to_datetime(fa['index'])\n","grp=pd.merge(grp.reset_index(),fa[['index','미래에셋']],left_on='Date',right_on='index',how='outer')\n","grp=grp[['Date','lstm_markowitz','kospi','미래에셋','KB펀드']]\n","grp=grp.dropna()\n","grp=grp.set_index('Date')"],"metadata":{"id":"_aH8bfLQDKS8","executionInfo":{"status":"aborted","timestamp":1652685398469,"user_tz":-540,"elapsed":469,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 차트 이미지 저장"],"metadata":{"id":"Jv70FOK4LFEl"}},{"cell_type":"code","source":["\n","p = grp.plot(figsize=(12, 7), style = '-o', fontsize=12)\n","p.legend(fontsize=12)\n","plt.savefig(\"/content/gdrive/My Drive/FINAL TEAM/파이널프로젝트/비주식팀/Data/하락/차트/기간\"+str(perf_df.index[1])[:10]+\"-\"+str(perf_df.index[-1])[:10]+\"감마\"+str(GAMMA_CONST)+\"REG\"+str(REG_CONST)+\"가중치.png\")\n","plt.show()"],"metadata":{"id":"QSrfSH44fOa-","executionInfo":{"status":"aborted","timestamp":1652685398469,"user_tz":-540,"elapsed":469,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# grp[grp['KB펀드']<grp['lstm_markowitz']]"],"metadata":{"id":"_F7k2K2nLKUr","executionInfo":{"status":"aborted","timestamp":1652685398470,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# grp[grp['KB펀드']>grp['lstm_markowitz']]"],"metadata":{"id":"NqFSPOE2QSaj","executionInfo":{"status":"aborted","timestamp":1652685398470,"user_tz":-540,"elapsed":469,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"v8UJMpq3Q7KT","executionInfo":{"status":"aborted","timestamp":1652685398471,"user_tz":-540,"elapsed":470,"user":{"displayName":"김민형","userId":"04715177399584409641"}}},"execution_count":null,"outputs":[]}]}